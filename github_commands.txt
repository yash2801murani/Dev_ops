##YASH MURANI. 


## üîß **Setup Commands**

| Command                                           | Description                |
| ------------------------------------------------- | -------------------------- |
| `git config --global user.name "Your Name"`       | Set your Git username      |
| `git config --global user.email "your@email.com"` | Set your Git email         |
| `git config --list`                               | Show current configuration |
| `git --version`                                   | Check Git version          |

---

## üìÅ **Repository Initialization & Cloning**

| Command                | Description                 |
| ---------------------- | --------------------------- |
| `git init`             | Initialize a new local repo |
| `git clone <repo_url>` | Clone a remote repo         |

---

## üìÑ **Basic Workflow (Staging, Committing, Pushing)**

| Command                    | Description                        |
| -------------------------- | ---------------------------------- |
| `git status`               | Show file status                   |
| `git add <file>`           | Stage specific file                |
| `git add .`                | Stage all files                    |
| `git commit -m "message"`  | Commit staged files with a message |
| `git push`                 | Push changes to remote repo        |
| `git push origin <branch>` | Push changes to a specific branch  |

---

## üì• **Pulling & Fetching**

| Command     | Description                         |
| ----------- | ----------------------------------- |
| `git pull`  | Fetch and merge changes from remote |
| `git fetch` | Fetch changes (but don‚Äôt merge)     |

---

## üåø **Branching**

| Command                         | Description                        |
| ------------------------------- | ---------------------------------- |
| `git branch`                    | List branches                      |
| `git branch <branch-name>`      | Create a new branch                |
| `git checkout <branch-name>`    | Switch to a branch                 |
| `git checkout -b <branch-name>` | Create and switch to a new branch  |
| `git merge <branch-name>`       | Merge a branch into current branch |
| `git branch -d <branch-name>`   | Delete a local branch              |

---

## üìÇ **Remote Repository**

| Command                       | Description                |
| ----------------------------- | -------------------------- |
| `git remote -v`               | Show remote URLs           |
| `git remote add origin <url>` | Add a remote repository    |
| `git remote remove origin`    | Remove a remote repository |

---

## üï∞Ô∏è **History and Logs**

| Command             | Description                     |
| ------------------- | ------------------------------- |
| `git log`           | Show commit history             |
| `git log --oneline` | Short summary of commit history |
| `git diff`          | Show changes not staged yet     |
| `git diff --staged` | Show staged changes             |

---

## üßπ **Undo Changes**

| Command                  | Description                                      |
| ------------------------ | ------------------------------------------------ |
| `git reset <file>`       | Unstage a file                                   |
| `git checkout -- <file>` | Discard local changes                            |
| `git reset --hard`       | Reset everything to last commit (‚ö†Ô∏è destructive) |

---

## üîÑ **Reverting and Resetting**

| Command                      | Description                                |
| ---------------------------- | ------------------------------------------ |
| `git revert <commit>`        | Revert a commit by creating a new one      |
| `git reset --soft <commit>`  | Reset to a commit (keep files staged)      |
| `git reset --mixed <commit>` | Reset to a commit (unstage files)          |
| `git reset --hard <commit>`  | Reset to a commit (discard all changes) ‚ö†Ô∏è |

---

## üîç **Stashing Changes**

| Command           | Description                                 |
| ----------------- | ------------------------------------------- |
| `git stash`       | Save uncommitted changes                    |
| `git stash list`  | List stashed changes                        |
| `git stash pop`   | Reapply and remove last stash               |
| `git stash apply` | Reapply last stash (but keep in stash list) |

---

## üìå **Tagging**

| Command                          | Description         |
| -------------------------------- | ------------------- |
| `git tag`                        | List tags           |
| `git tag <name>`                 | Create a tag        |
| `git tag -a <name> -m "message"` | Annotated tag       |
| `git push origin <tagname>`      | Push a specific tag |
| `git push origin --tags`         | Push all tags       |

---

## üõ†Ô∏è **Advanced**

| Command                    | Description                                      |
| -------------------------- | ------------------------------------------------ |
| `git cherry-pick <commit>` | Apply a specific commit from another branch      |
| `git rebase <branch>`      | Reapply commits on top of another base tip       |
| `git reflog`               | View history of HEAD changes (good for recovery) |
